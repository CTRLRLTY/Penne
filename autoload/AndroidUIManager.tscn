[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "#extends CanvasLayer
#
#const KeyboardTextBoxScene = preload(\"res://Scene/KeyboardTextBox.tscn\")
#const TargetRes = Vector2(ProjectSettings[\"display/window/size/width\"],ProjectSettings[\"display/window/size/height\"])
#const DeviceRes = OS.window_size
#
#var KeyboardTextBox : LineEdit
#var FocusedInput : Control
#var ratio := TargetRes / DeviceRes
#
#func _ready() -> void:
#	OS.show_virtual_keyboard(\"hello\", true)	
#	if not OS.get_name().match(\"Android\"):
#		set_physics_process(false)
#
##func _physics_process(delta: float) -> void:
##	if OS.get_virtual_keyboard_height():
##		if get_tree().current_scene is Control:
##			if not FocusedInput:
##				FocusedInput = get_tree().current_scene.get_focus_owner()
##
##			if not KeyboardTextBox:
##				KeyboardTextBox = KeyboardTextBoxScene.instance()
##				add_child(KeyboardTextBox)
##				KeyboardTextBox.text = FocusedInput.text
##				KeyboardTextBox.caret_position = len(FocusedInput.text)
##				KeyboardTextBox.connect(\"text_changed\", self, \"_on_TextBox_text_changed\")
##				KeyboardTextBox.connect(\"focus_exited\",self, \"_on_TextBox_focus_exited\")	
##				KeyboardTextBox.grab_focus()
##				OS.show_virtual_keyboard(\"hello\", true)
##
##			KeyboardTextBox.rect_position.y = 341 - (OS.get_virtual_keyboard_height() * ratio.y)
##	else:
##		if KeyboardTextBox:
##			_destroy_TextBox()
#
#func _destroy_TextBox() -> void:
#	KeyboardTextBox.queue_free()
#	KeyboardTextBox = null
#	FocusedInput = null
#
#func _on_TextBox_focus_exited():
#	_destroy_TextBox()
#
#func _on_TextBox_text_changed(new_text: String) -> void:
#	FocusedInput.text = new_text
#
#
"

[node name="CanvasLayer" type="CanvasLayer"]
layer = 9
script = SubResource( 1 )
