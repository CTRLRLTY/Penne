[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends CanvasLayer

const KeyboardTextBoxScene = preload(\"res://Scene/KeyboardTextBox.tscn\")
const TargetRes = Vector2(ProjectSettings[\"display/window/size/width\"],ProjectSettings[\"display/window/size/height\"])
const DeviceRes = OS.window_size

var KeyboardTextBox : LineEdit
var FocusedInput : Control
var ratio := TargetRes / DeviceRes

func _ready() -> void:
	if not OS.get_name().match(\"Android\"):
		set_physics_process(false)

func _physics_process(delta: float) -> void:
	if OS.get_virtual_keyboard_height():
		if KeyboardTextBox:
			KeyboardTextBox.rect_size.y -= OS.get_virtual_keyboard_height() * ratio.y
			return
			
		if get_tree().current_scene is Control:
			if not FocusedInput:
				FocusedInput = get_tree().current_scene.get_focus_owner()
				
			if not FocusedInput is LineEdit:
				FocusedInput = null
				return
				
			KeyboardTextBox = KeyboardTextBoxScene.instance()
			
			add_child(KeyboardTextBox)
			KeyboardTextBox.rect_size.y -= OS.get_virtual_keyboard_height() * ratio.y
			KeyboardTextBox.grab_focus()
			
			KeyboardTextBox.connect(\"text_changed\", self, \"_on_TextBox_text_changed\")
	else:
		if KeyboardTextBox:
			KeyboardTextBox.queue_free()
			KeyboardTextBox = null
			FocusedInput = null
			
func _on_TextBox_text_changed(new_text: String) -> void:
#	OS.alert(\"textSize: %s\\nKeyboardSize: %s\\nWinSize: %s\\nRatio: %s\" % [KeyboardTextBox.get_size(),  OS.get_virtual_keyboard_height() * ratio.y, OS.window_size, ratio])
	FocusedInput.text = new_text

"

[node name="CanvasLayer" type="CanvasLayer"]
layer = 9
script = SubResource( 1 )
